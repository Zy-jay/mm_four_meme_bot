import { ethers, isAddress, parseEther } from "ethers";
import { SupportedChainId } from "../constants/chains";
import { createNewWallet } from "../libs/createWallet";
import { getEthersProvider } from "../libs/getProvider";
import { getWallet } from "../libs/getWallet";
import PrivateKey from "../models/PrivateKey";
import { stringify } from "csv-stringify/sync";
import {
  FOR_MEME_DEX_ADDRESS,
  MULTICALL_ADDRESS,
} from "../constants/addresses";
import ABI from "../constants/abis/for_meme.json";

class WalletService {
  constructor() {}
  async createWallets(amount: number, userId: number) {
    return await createNewWallet(userId, Math.floor(amount));
  }

  async getUserWallets(userId: number) {
    return (await PrivateKey.find({ userId })).map((wallet) =>
      wallet?.toObject()
    );
  }

  async sortWalletsByNames(
    wallets: {
      address: string;
      walletName: string;
    }[]
  ): Promise<{
    [key: string]: {
      address: string;
      walletName: string;
    }[];
  }> {
    const sortedWallets: {
      [key: string]: {
        address: string;
        walletName: string;
      }[];
    } = {};
    wallets.forEach((wallet) => {
      if (!sortedWallets[wallet.walletName]) {
        sortedWallets[wallet.walletName] = [];
      }
      sortedWallets[wallet.walletName].push(wallet);
    });
    return sortedWallets;
  }

  getUserSortedWallets = async (userId: number) => {
    const wallets = await this.getUserWallets(userId);
    return await this.sortWalletsByNames(wallets as any);
  };
  async getWalletsPack(userId: number, walletsPackId: string) {
    return await PrivateKey.find({ userId, walletName: walletsPackId });
  }

  sendBatchBNB = async (
    senderPrivateKey: string,
    recipients: { address: string; amount: string | number }[]
  ) => {
    const provider = getEthersProvider(SupportedChainId.BSC);
    const wallet = getWallet(senderPrivateKey, provider);

    const txs = await Promise.all(
      recipients.map(async ({ address, amount }, index) => {
        const tx = await wallet.populateTransaction({
          to: address,
          value: parseEther(amount.toString()),
          gasLimit: 21_000, // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π gas limit –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ BNB
        });

        tx.nonce = (await wallet.getNonce()) + index;
        return tx;
      })
    );

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const signedTxs = await Promise.all(
      txs.map((tx) => wallet.sendTransaction(tx))
    );

    // –ñ–¥–µ–º –ø–æ–∫–∞ –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±—É–¥—É—Ç –≤–∫–ª—é—á–µ–Ω—ã –≤ –±–ª–æ–∫
    const tsResses = await Promise.all(signedTxs.map((tx) => tx.wait()));

    return tsResses.map((tx) => tx?.hash);
  };
  sendBnb = async (
    senderPrivateKey: string,
    recipient: string,
    gasPrice: bigint
  ) => {
    const provider = getEthersProvider(SupportedChainId.BSC);
    const wallet = getWallet(senderPrivateKey, provider);
    const balance = await provider.getBalance(wallet.address);
    if (!balance) return undefined;
    const tx = {
      to: recipient,
      value: 0n,
      gasLimit: 21_000n,
      gasPrice,
    };
    const gas = await wallet.estimateGas(tx);
    if (!gas) return undefined;
    tx.gasLimit = gas;
    tx.value = balance - gas * gasPrice;
    const txRes = await wallet.sendTransaction({
      ...tx,
    });
    return txRes;
  };

  async sendOutToWallets(
    userId: number,
    fromWallet: string,
    walletsPackId: string,
    amount: number
  ) {
    const wallets = await PrivateKey.find({
      userId,
      walletName: walletsPackId,
    });
    if (!wallets.length) {
      throw new Error("No wallets found");
    }
    let wallet: any = wallets.find((w) => w.address === fromWallet);
    if (!wallet) {
      wallet = await PrivateKey.findOne({ userId, address: fromWallet });
    }
    if (!wallet) {
      throw new Error("No wallet found");
    }
    const privateKey = wallet.privateKey;
    if (!privateKey) {
      throw new Error("No private key found");
    }
    const walletsToSend = wallets.filter((w) => w.address !== fromWallet);
    const walletTo = walletsToSend[0];
    if (!walletTo) {
      throw new Error("No wallet to send found");
    }
    const walletToPrivateKey = walletTo.privateKey;
    if (!walletToPrivateKey) {
      throw new Error("No wallet to send private key found");
    }
    return await this.sendBatchBNB(
      privateKey,
      walletsToSend.map((w) => ({
        address: w.address,
        amount: amount.toString(),
      }))
    );
  }
  async sendAllToWallet(
    userId: number,
    toWallet: string,
    walletsPackId: string,
    amount?: number
  ) {
    if (!isAddress(toWallet)) throw new Error("Invalid address");
    const wallets = await PrivateKey.find({
      userId,
      walletName: walletsPackId,
    });
    if (!wallets.length) {
      throw new Error("No wallets found");
    }

    const walletsFromSend = wallets.filter((w) => w.address !== toWallet);
    const walletFrom = walletsFromSend[0];
    if (!walletFrom) {
      throw new Error("No wallet to send found");
    }
    const walletToPrivateKey = walletFrom.privateKey;
    if (!walletToPrivateKey) {
      throw new Error("No wallet to send private key found");
    }
    const provider = getEthersProvider(SupportedChainId.BSC);
    const { gasPrice } = await provider.getFeeData();
    if (!gasPrice) throw new Error("No gas price found");
    const txHashes = await Promise.all(
      walletsFromSend.map(async (wallet) => {
        return await this.sendBnb(wallet.privateKey, toWallet, gasPrice);
      })
    );
    return txHashes.map((tx) => tx?.hash ?? (tx as any)?.transactionHash);
  }
  decodeResponse(hexData: string) {
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "0x"
    const data = hexData.startsWith("0x") ? hexData.slice(2) : hexData;

    // –û–ø—Ä–µ–¥–µ–ª–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    const decodedData: any = {};

    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ (20 –±–∞–π—Ç)
    const tokenAddress = ethers.getAddress("0x" + data.slice(24, 64)); // –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞
    decodedData.tokenAddress = tokenAddress;
    console.log(`üîπ –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞: ${tokenAddress} `);
    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –≤–µ—Ä–æ—è—Ç–Ω–æ, —ç—Ç–æ –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –∫–∞–∫–æ–π-—Ç–æ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å
    decodedData.emptyValue = ethers
      .toBigInt("0x" + data.slice(64, 128))
      .toString();
    console.log(`üîπ –ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${decodedData.emptyValue} `);
    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º uint256 (—ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
    const uint256Value = ethers
      .toBigInt("0x" + data.slice(128, 192))
      .toString();
    decodedData.uint256Value = uint256Value;
    console.log(`üîπ uint256Value: ${uint256Value} `);
    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ (–∫–∞–∂–¥–æ–µ –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–µ—Ç –±—ã—Ç—å uint256 –∏–ª–∏ –∞–¥—Ä–µ—Å)
    const additionalValues = [];
    let offset = 192;
    while (offset + 64 <= data.length) {
      const value = ethers
        .toBigInt("0x" + data.slice(offset, offset + 64))
        .toString();
      additionalValues.push(value);
      offset += 64;
    }
    decodedData.additionalValues = additionalValues;
    console.log(`üîπ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: ${additionalValues} `);
    console.log(
      `üîπ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${
        Number(
          decodedData.additionalValues[decodedData.additionalValues.length - 1]
        ) /
        10 ** 18
      } `
    );
    return decodedData;
  }
  batchBuySell = async (
    walletPrivateKey: string,
    tokenAddress: string,
    funds: string // BNB –¥–ª—è –ø–æ–∫—É–ø–∫–∏
  ) => {
    const provider = getEthersProvider(SupportedChainId.BSC);
    const wallet = getWallet(walletPrivateKey, provider);
    const contract = new ethers.Contract(FOR_MEME_DEX_ADDRESS, ABI, wallet);
    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
    const functionSignature = "0x4e684626b";
    // –§–æ—Ä–º–∏—Ä—É–µ–º calldata
    const encodedData =
      functionSignature + tokenAddress.slice(2).padStart(64, "0"); // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ eth_call
    const response = await provider.call({
      to: MULTICALL_ADDRESS,
      // from: wallet.address,
      data: `0x82ad56cb0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000005c952063c7fc8610ffdb798152d69f0b9550762b000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000024e684626b000000000000000000000000${tokenAddress.slice(
        2
      )}00000000000000000000000000000000000000000000000000000000`,
    });
    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∫–∞–∫ –º–∞—Å—Å–∏–≤ uint256
    const decoded = ethers.AbiCoder.defaultAbiCoder().decode(
      [
        "address",
        "uint256",
        "uint256",
        "uint256",
        "uint256",
        "uint256",
        "uint256",
        "uint256",
        "uint256",
        "uint256",
      ],
      "0x" + response.slice(194) // –û—Ç—Å–µ–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ 194 —Å–∏–º–≤–æ–ª–∞ (0x + offset –¥–∞–Ω–Ω—ã–µ)
    );
    const reserveBNB = BigInt(decoded[6]); // –†–µ–∑–µ—Ä–≤ BNB (—Å —É—á–µ—Ç–æ–º –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤)
    const reserveToken = BigInt(decoded[7]); // –†–µ–∑–µ—Ä–≤ —Ç–æ–∫–µ–Ω–∞ (—Å —É—á–µ—Ç–æ–º –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤)
    // –¶–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞ –≤ BNB (—Å —É—á–µ—Ç–æ–º —Ç–æ—á–Ω–æ—Å—Ç–∏)
    const priceInBNB = Number(reserveToken) / Number(reserveBNB);
    console.log(`üîπ –†–µ–∑–µ—Ä–≤—ã: ${decoded}`, decoded[7], decoded[6]);
    console.log(`üîπ –¶–µ–Ω–∞: ${priceInBNB / 10 ** 8}`);
    // console.log(`üîπ –†–µ–∑–µ—Ä–≤—ã: ${this.decodeResponse(response)} `);
    // üîπ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞ –ø–æ–∫—É–ø–∫—É
    // const buyTx = await contract.buyTokenAMAP.populateTransaction(
    //   tokenAddress,
    //   ethers.parseEther(funds),
    //   0n,
    //   { value: ethers.parseEther(funds) }
    // );
    // const tokenContract = new ethers.Contract(
    //   tokenAddress,
    //   ["function approve(address spender, uint256 amount) returns (bool)"],
    //   wallet
    // );
    // const approveTx = await tokenContract.approve.populateTransaction(
    //   FOR_MEME_DEX_ADDRESS,
    //   ethers.MaxUint256
    // );
    // // üîπ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
    // const sellTx = await contract.sellToken.populateTransaction(
    //   tokenAddress,
    //   ethers.parseEther(sellAmount),
    //   0n
    // );

    // // –ü–æ–ª—É—á–∞–µ–º nonce
    // const nonce = await provider.getTransactionCount(wallet.address);

    // // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º nonce –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    // buyTx.nonce = nonce;
    // approveTx.nonce = nonce + 1;
    // sellTx.nonce = nonce + 2;

    // // const signedBuyTx = await wallet.signTransaction(buyTx);
    // // const signedSellTx = await wallet.signTransaction(sellTx);

    // // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å–µ—Ç—å
    // const buyTxRes = await wallet.sendTransaction(buyTx);
    // const approveTxRes = await wallet.sendTransaction(approveTx);
    // const sellTxRes = await wallet.sendTransaction(sellTx);

    // console.log(`‚úÖ –ü–æ–∫—É–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: ${buyTxRes.hash}`);
    // console.log(`‚úÖ –ê–ø–ø—Ä—É–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${approveTxRes.hash}`);
    // console.log(`‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: ${sellTxRes.hash}`);

    // return [buyTxRes, sellTxRes];
  };

  async buyTokenFromWallets(
    wallets: {
      address: string;
      privateKey: string;
    }[],
    tokenAddress: string,
    funds: string
  ) {
    const provider = getEthersProvider(SupportedChainId.BSC);
    const { gasPrice } = await provider.getFeeData();
    if (!gasPrice) throw new Error("No gas price found");
    // –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const signedTxs = await Promise.all(
      wallets.map(async ({ privateKey }) => {
        return await this.getBuyTokenTx(
          privateKey,
          tokenAddress,
          funds,
          gasPrice
        );
      })
    );

    console.log(signedTxs);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const txReceipts = await Promise.all(
      signedTxs.map((signedTx) =>
        provider
          .send("eth_sendRawTransaction", [signedTx]) // –ü–µ—Ä–µ–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Å –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
          .then((txHash) => txHash)
          .catch((e) => console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", e))
      )
    );

    provider.destroy();
    return txReceipts;
  }

  async sellTokenFromWallets(
    wallets: {
      address: string;
      privateKey: string;
    }[],
    tokenAddress: string
  ) {
    const txHashes: string[] = [];
    const provider_ = getEthersProvider(SupportedChainId.BSC);
    const { gasPrice } = await provider_.getFeeData();
    provider_.destroy();
    if (!gasPrice) throw new Error("No gas price found");
    const signedTxs = await Promise.all(
      wallets.map(async ({ privateKey }) => {
        return await this.getSellTokenTx(
          privateKey,
          tokenAddress,
          gasPrice
        ).catch((e) => {
          console.log(e);
          return undefined;
        });
      })
    );
    await Promise.all(
      signedTxs.map(async (sellTxs) => {
        if (!sellTxs) return;
        const [signedApprTx, signedSellTx] = sellTxs;
        if (!signedSellTx) return;
        const provider = getEthersProvider(SupportedChainId.BSC);
        console.log(signedApprTx?.toString(), signedSellTx.toString());
        try {
          if (signedApprTx) {
            const approveTxHash = await provider.send(
              "eth_sendRawTransaction",
              [signedApprTx]
            );
            console.log("Approve TX Hash:", approveTxHash);
            // txHashes.push(approveTxHash);
          }
          const sellTxHash = await provider.send("eth_sendRawTransaction", [
            signedSellTx,
          ]);
          console.log("Sell TX Hash:", sellTxHash);
          txHashes.push(sellTxHash);
        } catch (error) {
          console.error("Transaction error:", error);
        } finally {
          provider.destroy();
        }
      })
    );
    return txHashes;
  }

  async getBuyTokenTx(
    walletPrivateKey: string,
    tokenAddress: string,
    funds: string,
    gasPrice: bigint
  ) {
    const provider = getEthersProvider(SupportedChainId.BSC);
    const wallet = getWallet(walletPrivateKey, provider);
    const contract = new ethers.Contract(FOR_MEME_DEX_ADDRESS, ABI, wallet);
    // üîπ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞ –ø–æ–∫—É–ø–∫—É
    const buyTx = await contract.buyTokenAMAP.populateTransaction(
      tokenAddress,
      ethers.parseEther(funds),
      0n,
      { value: ethers.parseEther(funds) }
    );
    const nonce = await wallet.getNonce();
    console.log("Nonce:", gasPrice, nonce);
    const tx = {
      ...buyTx,
      to: FOR_MEME_DEX_ADDRESS,
      gasPrice,
      gasLimit: 210000,
      nonce,
      from: wallet.address,
      chainId: SupportedChainId.BSC,
      type: 0,
    };
    const signedTx = await wallet.signTransaction(tx);
    provider.destroy();
    return signedTx;
  }

  async getSellTokenTx(
    walletPrivateKey: string,
    tokenAddress: string,
    gasPrice: bigint
  ) {
    const provider = getEthersProvider(SupportedChainId.BSC);
    const wallet = getWallet(walletPrivateKey, provider);
    const contract = new ethers.Contract(FOR_MEME_DEX_ADDRESS, ABI, wallet);
    const tokenContract = new ethers.Contract(
      tokenAddress,
      [
        "function balanceOf(address) view returns (uint256)",
        "function allowance(address, address) view returns (uint256)",
        "function approve(address spender, uint256 amount) returns (bool)",
      ],
      wallet
    );
    const balance = await tokenContract.balanceOf(wallet.address);
    if (!balance) return undefined;
    const allowance = await tokenContract.allowance(
      wallet.address,
      FOR_MEME_DEX_ADDRESS
    );
    const nonce = await wallet.getNonce();
    let apprTx;
    if (allowance < balance) {
      const approveTx = await tokenContract.approve.populateTransaction(
        FOR_MEME_DEX_ADDRESS,
        ethers.MaxUint256
      );
      apprTx = {
        ...approveTx,
        to: tokenAddress,
        gasPrice,
        gasLimit: 210000,
        nonce: nonce,
        value: 0n,
        from: wallet.address,
        chainId: SupportedChainId.BSC,
        type: 0,
      };
    }

    // üîπ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞ –ø–æ–∫—É–ø–∫—É
    const sellTx = await contract.sellToken.populateTransaction(
      tokenAddress,
      balance
    );
    const tx = {
      ...sellTx,
      to: FOR_MEME_DEX_ADDRESS,
      gasPrice,
      gasLimit: 210000,
      nonce: nonce + (apprTx ? 1 : 0),
      value: 0n,
      from: wallet.address,
      chainId: SupportedChainId.BSC,
      type: 0,
    };

    const signedTx = await wallet.signTransaction(tx);
    const signedApprTx = apprTx
      ? await wallet.signTransaction(apprTx)
      : undefined;
    provider.destroy();
    console.log(signedTx, signedApprTx);
    return [signedApprTx, signedTx];
  }
  getCsvFromWallets(wallets: { address: string; privateKey: string }[]) {
    const headers = ["address", "privateKey"];
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è CSV –≤ –ø–∞–º—è—Ç–∏
    const csvData = stringify(wallets, {
      header: true,
      columns: headers,
      delimiter: ";",
    });

    // –°–æ–∑–¥–∞—ë–º –±—É—Ñ–µ—Ä –∏–∑ CSV-–¥–∞–Ω–Ω—ã—Ö
    const buffer = Buffer.from(csvData, "utf-8");
    console.log(buffer);
    return buffer;
  }
}

export default module.exports = new WalletService();

// 0x0000000000000000000000000000000000000001,64,416,748087004289007311971469228799536920553043733084,0,0,1000000000000000000000000000,800000000000000000000000000,24000000000000000000,1742894559 800000000000000000000000000n 1000000000000000000000000000n
// 0x0000000000000000000000000000000000000001,64,416,927294958276657558208606773843357323726560938214,0,0,1000000000000000000000000000,800000000000000000000000000,24000000000000000000,1742834330 800000000000000000000000000n 1000000000000000000000000000n
